version: '3.5'

volumes:
  geonetwork:
  esdata:
  esbackup:
  kibanadata:
  pgdata:
  pglog:
  pgadmindata:


networks:
  gn-network:
    driver: bridge


services:
  traefik:
    image: traefik:v2.7
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.database.address=:8081"
      - "--certificatesresolvers.myhttpchallenge.acme.httpchallenge=true"
      - "--certificatesresolvers.myhttpchallenge.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myhttpchallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myhttpchallenge.acme.email=melvin.hersent@ign.fr"
      - "--certificatesresolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - 80:80
      - 443:443
      # Port 8080 is open by default on lal vm
      # - 8080:8080
      # Need to redirect to 8081 when not using traefik.yml, cause port 8080 is used by default for dashboard
      - 8080:8081
    volumes:
      # Volumes needed for Traefik to listen to Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - "./letsencrypt:/letsencrypt"
      # - ./traefik_config/traefik.yml:/etc/traefik/traefik.yml:ro
      # - ./traefik_config/ssl:/etc/certs:ro
      # - ./traefik_config/traefik-config.yml:/etc/traefik/config.yml:ro
    restart: always
    labels:
      - "traefik.enable=true"
      # http and https
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-strip"
      - "traefik.http.middlewares.traefik-strip.stripprefix.prefixes=/traefik"
      # http
      - "traefik.http.routers.traefik.entryPoints=web"
      - "traefik.http.routers.traefik.rule=Host(`catalog.geohistoricaldata.org`, `www.catalog.geohistoricaldata.org`) && PathPrefix(`/traefik`) || PathPrefix(`/api`)"
      # https
      # - "traefik.http.routers.traefik.middlewares=redirect-to-https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik-secure.entryPoints=websecure"
      - "traefik.http.routers.traefik-secure.rule=Host(`catalog.geohistoricaldata.org`, `www.catalog.geohistoricaldata.org`) && PathPrefix(`/traefik`) || PathPrefix(`/api`)"
      - "traefik.http.routers.traefik-secure.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.traefik-secure.tls=true"
    networks:
      - gn-network

  database:
    image: postgis/postgis:11-2.5
    restart: always
    environment:
      POSTGRES_USER: geonetwork
      POSTGRES_PASSWORD: geonetwork
      POSTGRES_DB: geonetwork
    command: [ "postgres",
               "-c", "log_statement=all",
               "-c", "logging_collector=true",
               "-c", "log_file_mode=0644",
               "-c", "log_directory=/var/log/postgresql",
               "-c", "log_filename=postgresql.log" ]
    volumes:
      - pgdata:/var/lib/postgresql/data
      - pglog:/var/log/postgresql
    networks:
      - gn-network
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.database.rule=HostSNI(`*`,`database.catalog.geohistoricaldata.org`)"
      - "traefik.tcp.routers.database.entryPoints=database"
      - "traefik.tcp.routers.database.service=database"
      - "traefik.tcp.services.database.loadbalancer.server.port=5432"

  pgadmin4:
    image: dpage/pgadmin4:6.9
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@soduco.com
      PGADMIN_DEFAULT_PASSWORD: admin
      # SCRIPT_NAME needed for "PathPrefix" in traefik
      SCRIPT_NAME: /pgadmin
    # ports need to stay, even with traefik, or it will cause a security error
    ports:
      - 5050:80
    volumes:
      - pgadmindata:/var/lib/pgadmin
    networks:
      - gn-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin4.rule=Host(`catalog.geohistoricaldata.org`, `www.catalog.geohistoricaldata.org`) && PathPrefix(`/pgadmin`)"

  geonetwork:
    image: geonetwork:4.0.5
    restart: always
    environment:
      DATA_DIR: /catalogue-data

      JAVA_OPTS: >
        -Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
        -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true
        -Xms512M -Xss512M -Xmx2G -XX:+UseConcMarkSweepGC
        -Dgeonetwork.resources.dir=/catalogue-data/resources
        -Dgeonetwork.data.dir=/catalogue-data
        -Dgeonetwork.codeList.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/codelist
        -Dgeonetwork.schema.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/schema_plugins

      ES_HOST: elasticsearch
      ES_PROTOCOL: http
      ES_PORT: 9200

      KB_URL: http://kibana:5601

      GEONETWORK_DB_TYPE: postgres
      GEONETWORK_DB_HOST: database
      GEONETWORK_DB_PORT: 5432
      GEONETWORK_DB_NAME: geonetwork
      GEONETWORK_DB_USERNAME: geonetwork
      GEONETWORK_DB_PASSWORD: geonetwork
    volumes:
      - geonetwork:/catalogue-data
    depends_on:
      - elasticsearch
      - database
    networks:
      - gn-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.geonetwork.rule=Host(`catalog.geohistoricaldata.org`, `www.catalog.geohistoricaldata.org`) && PathPrefix(`/geonetwork`)"


  elasticsearch:
    image: elasticsearch:7.9.2
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    environment:
      ES_JAVA_OPTS: "-Xms1G -Xmx1G"
      discovery.type: single-node
      path.repo: "/usr/share/elasticsearch/snapshots"
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - esbackup:/usr/share/elasticsearch/snapshots
    networks:
      - gn-network

  kibana:
    image: kibana:7.9.2
    environment:
      SERVER_NAME: 'kibana'
      ELASTICSEARCH_URL: http://elasticsearch:9200/
      SERVER_BASEPATH: /geonetwork/dashboards
      SERVER_REWRITEBASEPATH: 'false'
      KIBANA_INDEX: .dashboards
      XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: 'true'
    networks:
      - gn-network
    volumes:
      - kibanadata:/usr/share/kibana/data


  angular-service: # The name of the service
    build: ./geonetwork-ui # Location of our Dockerfile
    volumes: # Volume binding
      - './geonetwork-ui:/usr/src/app'
    networks:
      - gn-network
    depends_on:
      - geonetwork
    command: > 
      bash -c "npm install && ng serve search --host 0.0.0.0 --port 4200"
